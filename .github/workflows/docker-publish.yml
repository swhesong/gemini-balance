name: Build and Push Multi-Arch Docker Image

# Controls when the action will run.
# Triggers the workflow on push events for the main branch and for tags like v1.0.0
on:
  push:
    branches: [ main ]
    tags:
      - 'v*.*.*'

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      # 1. 检出代码库
      - name: Checkout repository
        uses: actions/checkout@v4

      # 新增步骤 A: 设置 QEMU
      # 这是必需的，因为它允许 amd64 架构的 Runner 模拟并构建 arm64 架构的镜像。
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # 新增步骤 B: 设置 Docker Buildx
      # Buildx 是一个 Docker CLI 插件，它扩展了 docker build 命令，
      # 使其能够轻松地构建多平台镜像。
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 2. 登录到 Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 3. 提取 Docker 元数据 (标签等)
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: devinglaw/gemini-balance
          tags: |
            # 规则1: 当有代码推送到 main 分支时, 添加 "latest" 标签
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}
            # 规则2: 当你推送一个Git标签 (例如 v1.2.3) 时, 创建一个同版本的Docker标签 (1.2.3)
            type=ref,event=tag
      # 4. 构建并推送多平台镜像 (核心修改)
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          # 核心修改: 在这里指定您想要构建的所有平台
          platforms: linux/amd64,linux/arm64 
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

